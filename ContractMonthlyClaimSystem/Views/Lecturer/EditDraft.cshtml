@model ContractMonthlyClaimSystem.Models.MonthlyClaim
@{
    ViewData["Title"] = "Edit Draft Claim";
}

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h2 class="card-title mb-1">
                                <i class="fas fa-edit me-2"></i>Edit Draft Claim
                            </h2>
                            <p class="card-text mb-0">
                                Editing claim for @Model.DisplayMonth | Created: @Model.SubmissionDate.ToString("dd MMMM yyyy")
                            </p>
                        </div>
                        <div class="col-md-4 text-end">
                            <div class="bg-light text-dark p-3 rounded">
                                <h5 class="mb-1">Current Status</h5>
                                <span class="badge bg-secondary fs-6">@Model.Status</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0">
                        <i class="fas fa-pencil-alt me-2"></i>Edit Claim Details
                    </h5>
                </div>
                <div class="card-body">
                    <form asp-controller="Lecturer" asp-action="UpdateDraft" method="post" id="editClaimForm" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                        <input type="hidden" asp-for="ClaimId" />
                        <input type="hidden" name="id" value="@Model.ClaimId" />
                        <input type="hidden" asp-for="LecturerId" />
                        <input type="hidden" asp-for="ClaimMonth" />
                        <input type="hidden" asp-for="SubmissionDate" />

                        <div class="row">
                            <div class="col-md-6">
                                <!-- Claim Details (Read-only) -->
                                <div class="mb-3">
                                    <label class="form-label">Claim Month</label>
                                    <input type="text" class="form-control" value="@Model.DisplayMonth" readonly>
                                    <div class="form-text">Claim month cannot be changed</div>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Submission Date</label>
                                    <input type="text" class="form-control" value="@Model.SubmissionDate.ToString("dd MMMM yyyy")" readonly>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Lecturer</label>
                                    <input type="text" class="form-control" value="@Model.Lecturer?.FullName" readonly>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <!-- Editable Fields -->
                                <div class="mb-3">
                                    <label for="TotalHours" class="form-label">Total Hours Worked *</label>
                                    <input type="number" step="0.5" min="0.5" max="200"
                                           class="form-control" id="TotalHours" name="TotalHours"
                                           value="@Model.TotalHours" required>
                                    <div class="form-text">Hours must be between 0.5 and 200</div>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Hourly Rate</label>
                                    <input type="text" class="form-control"
                                           value="R @Model.Lecturer?.HourlyRate.ToString("N2")" readonly>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Estimated Amount</label>
                                    <input type="text" class="form-control" id="EstimatedAmount"
                                           value="R @Model.TotalAmount.ToString("N2")" readonly>
                                    <div class="form-text">Calculated based on hours × hourly rate</div>
                                </div>
                            </div>
                        </div>

                        <!-- Current Documents Section -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-header bg-info text-white">
                                        <h6 class="mb-0">
                                            <i class="fas fa-files me-2"></i>Current Supporting Documents
                                            <span class="badge bg-light text-dark ms-2">@Model.SupportingDocuments.Count</span>
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        @if (Model.SupportingDocuments.Any())
                                        {
                                            <div class="table-responsive">
                                                <table class="table table-sm">
                                                    <thead>
                                                        <tr>
                                                            <th>Document Name</th>
                                                            <th>Type</th>
                                                            <th>Size</th>
                                                            <th>Upload Date</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var document in Model.SupportingDocuments)
                                                        {
                                                            <tr>
                                                                <td>
                                                                    <div class="d-flex align-items-center">
                                                                        <i class="fas fa-file text-primary me-2"></i>
                                                                        <div>
                                                                            <div class="fw-bold small">@document.OriginalFileName</div>
                                                                        </div>
                                                                    </div>
                                                                </td>
                                                                <td>
                                                                    <span class="badge bg-secondary">@document.DocumentType</span>
                                                                </td>
                                                                <td>@document.FileSizeDisplay</td>
                                                                <td>@document.UploadDate.ToString("dd MMM yyyy")</td>
                                                                <td>
                                                                    <a asp-controller="Lecturer"
                                                                       asp-action="DownloadDocument"
                                                                       asp-route-documentId="@document.DocumentId"
                                                                       class="btn btn-sm btn-outline-primary me-1"
                                                                       title="Download">
                                                                        <i class="fas fa-download"></i>
                                                                    </a>
                                                                    <button type="button" class="btn btn-sm btn-outline-danger"
                                                                            onclick="removeDocument(@document.DocumentId, '@document.OriginalFileName')"
                                                                            title="Remove">
                                                                        <i class="fas fa-trash"></i>
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-center py-3">
                                                <i class="fas fa-file-excel fa-2x text-muted mb-2"></i>
                                                <p class="text-muted mb-0">No documents attached to this claim</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Add New Documents Section -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-header bg-success text-white">
                                        <h6 class="mb-0">
                                            <i class="fas fa-plus me-2"></i>Add New Documents
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label class="form-label">Add Supporting Documents</label>
                                            <div class="border rounded p-3 bg-light">
                                                <div class="d-flex justify-content-between align-items-center mb-3">
                                                    <h6 class="mb-0">New Documents to Add</h6>
                                                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#documentModal">
                                                        <i class="fas fa-plus me-1"></i>Add Document
                                                    </button>
                                                </div>

                                                <div id="newDocumentsList" class="mb-3">
                                                    <div class="text-muted small" id="noNewDocumentsMessage">No new documents added yet</div>
                                                </div>

                                                <!-- Hidden containers for new documents -->
                                                <div id="newHiddenFileInputsContainer" style="display: none;"></div>
                                                <div id="newDocumentMetadataContainer" style="display: none;"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                    <a asp-controller="Lecturer" asp-action="ClaimDetails" asp-route-id="@Model.ClaimId"
                                       class="btn btn-outline-secondary me-md-2">
                                        <i class="fas fa-times me-2"></i>Cancel
                                    </a>
                                    <button type="submit" name="action" value="save" class="btn btn-warning me-md-2">
                                        <i class="fas fa-save me-2"></i>Update Draft
                                    </button>
                                    <button type="submit" name="action" value="submit" class="btn btn-success">
                                        <i class="fas fa-paper-plane me-2"></i>Submit Claim
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Document Modal (Same as in Dashboard) -->
<div class="modal fade" id="documentModal" tabindex="-1" aria-labelledby="documentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="documentModalLabel">
                    <i class="fas fa-file-upload me-2"></i>Add Supporting Document
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="modalDocumentType" class="form-label">Document Type *</label>
                    <select class="form-select" id="modalDocumentType" required>
                        <option value="">Select Type</option>
                        <option value="0">Timesheet</option>
                        <option value="1">Invoice</option>
                        <option value="2">Receipt</option>
                        <option value="3">Contract</option>
                        <option value="4">Other</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label for="modalFile" class="form-label">Select File *</label>
                    <input type="file" class="form-control" id="modalFile"
                           accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" required>
                    <div class="form-text small">
                        Supported formats: PDF, Word, JPG, PNG (Max 10MB)
                    </div>
                </div>

                <div class="mb-3">
                    <label for="modalDescription" class="form-label">Description</label>
                    <textarea class="form-control" id="modalDescription" rows="2"
                              placeholder="Brief description of this document"></textarea>
                </div>

                <div id="filePreview" class="alert alert-light mt-3" style="display: none;">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-file text-primary me-3 fa-2x"></i>
                        <div>
                            <strong id="fileNamePreview"></strong><br>
                            <small class="text-muted" id="fileSizePreview"></small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="addDocumentBtn">Add Document</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Document management for new documents
        let newDocuments = [];
        let documentCounter = 0;

        // Real-time amount calculation
        document.getElementById('TotalHours').addEventListener('input', function() {
            const hours = parseFloat(this.value) || 0;
            const hourlyRate = @Model.Lecturer?.HourlyRate ?? 0;
            const amount = hours * hourlyRate;
            document.getElementById('EstimatedAmount').value = 'R ' + amount.toFixed(2);
        });

        // Document modal functionality
        document.getElementById('modalFile').addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                showFilePreview(file);
            } else {
                hideFilePreview();
            }
        });

        document.getElementById('addDocumentBtn').addEventListener('click', function() {
            addDocumentToForm();
        });

        // Reset modal when it's hidden
        document.getElementById('documentModal').addEventListener('hidden.bs.modal', function() {
            resetModal();
        });

        function showFilePreview(file) {
            const fileSize = (file.size / (1024 * 1024)).toFixed(2);
            const fileType = getFileType(file.name);

            document.getElementById('fileNamePreview').textContent = file.name;
            document.getElementById('fileSizePreview').textContent = fileType + ' • ' + fileSize + ' MB';
            document.getElementById('filePreview').style.display = 'block';
        }

        function hideFilePreview() {
            document.getElementById('filePreview').style.display = 'none';
        }

        function getFileType(filename) {
            const ext = filename.split('.').pop().toLowerCase();
            if (['pdf'].includes(ext)) return 'PDF';
            if (['doc', 'docx'].includes(ext)) return 'Word';
            if (['jpg', 'jpeg', 'png'].includes(ext)) return 'Image';
            return ext.toUpperCase();
        }

        function addDocumentToForm() {
            const fileInput = document.getElementById('modalFile');
            const documentType = document.getElementById('modalDocumentType');
            const description = document.getElementById('modalDescription');

            if (!fileInput.files[0]) {
                alert('Please select a file.');
                return;
            }

            if (!documentType.value) {
                alert('Please select a document type.');
                return;
            }

            const file = fileInput.files[0];

            // Check file size
            if (file.size > 10 * 1024 * 1024) {
                alert('File size exceeds 10MB limit. Please choose a smaller file.');
                return;
            }

            // Create document object with unique ID
            const documentId = 'new_doc_' + documentCounter++;
            const documentObj = {
                id: documentId,
                file: file,
                type: documentType.value,
                typeText: documentType.options[documentType.selectedIndex].text,
                description: description.value,
                name: file.name,
                size: file.size,
                sizeMB: (file.size / (1024 * 1024)).toFixed(2)
            };

            // Add to new documents array
            newDocuments.push(documentObj);

            // Get the current index (new position in array)
            const currentIndex = newDocuments.length - 1;

            // Create hidden file input for this document
            createHiddenFileInput(documentObj);

            // Create metadata inputs for this document WITH INDEX
            createMetadataInputs(documentObj, currentIndex);

            // Update UI
            updateNewDocumentsList();

            // Show success message
            showToast('Document added successfully!', 'success');

            // Close modal and reset
            bootstrap.Modal.getInstance(document.getElementById('documentModal')).hide();
        }

        function createHiddenFileInput(documentObj) {
            const container = document.getElementById('newHiddenFileInputsContainer');

            // Create a new file input for this specific file
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.name = 'NewSupportingDocuments';
            fileInput.style.display = 'none';
            fileInput.id = `fileInput_${documentObj.id}`;

            // Create a DataTransfer object to hold the file
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(documentObj.file);
            fileInput.files = dataTransfer.files;

            container.appendChild(fileInput);
        }

                function createMetadataInputs(documentObj, index) {
            const container = document.getElementById('newDocumentMetadataContainer');

            // Create hidden input for document type (per document) WITH INDEX
            const typeInput = document.createElement('input');
            typeInput.type = 'hidden';
            typeInput.name = `NewDocumentTypes`; // Remove index for proper model binding
            typeInput.value = documentObj.type;
            typeInput.id = `typeInput_${documentObj.id}`;

            // Create hidden input for document description (per document) WITH INDEX
            const descInput = document.createElement('input');
            descInput.type = 'hidden';
            descInput.name = `NewDocumentDescriptions`; // Remove index for proper model binding
            descInput.value = documentObj.description || '';
            descInput.id = `descInput_${documentObj.id}`;

            container.appendChild(typeInput);
            container.appendChild(descInput);
        }

        function updateNewDocumentsList() {
            const documentsList = document.getElementById('newDocumentsList');
            const noDocumentsMessage = document.getElementById('noNewDocumentsMessage');

            if (newDocuments.length === 0) {
                noDocumentsMessage.style.display = 'block';
                const existingItems = documentsList.querySelectorAll('.new-document-item');
                existingItems.forEach(item => item.remove());
                return;
            }

            noDocumentsMessage.style.display = 'none';
            const existingItems = documentsList.querySelectorAll('.new-document-item');
            existingItems.forEach(item => item.remove());

            newDocuments.forEach((doc) => {
                const documentItem = document.createElement('div');
                documentItem.className = 'new-document-item card mb-2';
                documentItem.id = `new-doc-item-${doc.id}`;
                documentItem.innerHTML = `
                    <div class="card-body py-2">
                        <div class="row align-items-center">
                            <div class="col-8">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-file text-success me-2"></i>
                                    <div>
                                        <div class="fw-bold small text-truncate">${doc.name}</div>
                                        <div class="text-muted smaller">
                                            ${doc.typeText} • ${doc.sizeMB} MB
                                            ${doc.description ? '• ' + doc.description : ''}
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-4 text-end">
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeNewDocument('${doc.id}')">
                                    <i class="fas fa-trash"></i> Remove
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                documentsList.appendChild(documentItem);
            });
        }

        function removeNewDocument(id) {
            // Find the index before removal
            const indexToRemove = newDocuments.findIndex(doc => doc.id === id);

            // Remove from documents array
            newDocuments = newDocuments.filter(doc => doc.id !== id);

            // Remove hidden file input
            const fileInput = document.getElementById(`fileInput_${id}`);
            if (fileInput) fileInput.remove();

            // Remove metadata inputs
            const typeInput = document.getElementById(`typeInput_${id}`);
            const descInput = document.getElementById(`descInput_${id}`);
            if (typeInput) typeInput.remove();
            if (descInput) descInput.remove();

            // Remove the document item from UI
            const documentItem = document.getElementById(`new-doc-item-${id}`);
            if (documentItem) documentItem.remove();

            // RE-INDEX all remaining documents
            reindexNewDocuments();

            // Update UI
            updateNewDocumentsList();

            showToast('Document removed!', 'warning');
        }

        function reindexNewDocuments() {
            // Clear all existing metadata inputs
            const metadataContainer = document.getElementById('newDocumentMetadataContainer');
            metadataContainer.innerHTML = '';

            // Recreate metadata inputs with correct indexes
            newDocuments.forEach((doc, index) => {
                createMetadataInputs(doc, index);
            });
        }

        function removeDocument(documentId, fileName) {
            if (confirm(`Are you sure you want to remove "${fileName}" from this claim?`)) {
                // Add hidden input to mark document for deletion
                const deleteContainer = document.getElementById('newDocumentMetadataContainer');
                const deleteInput = document.createElement('input');
                deleteInput.type = 'hidden';
                deleteInput.name = 'DocumentsToDelete';
                deleteInput.value = documentId;
                deleteContainer.appendChild(deleteInput);

                // Hide the row (actual deletion will happen on server)
                const row = document.querySelector(`button[onclick="removeDocument(${documentId}, '${fileName}')"]`).closest('tr');
                row.style.display = 'none';

                showToast('Document marked for removal!', 'warning');
            }
        }

        function resetModal() {
            document.getElementById('modalFile').value = '';
            document.getElementById('modalDocumentType').value = '';
            document.getElementById('modalDescription').value = '';
            hideFilePreview();
        }

        function showToast(message, type = 'info') {
            alert(message);
        }

        // Form validation
        document.getElementById('editClaimForm').addEventListener('submit', function(e) {
            const hours = parseFloat(document.getElementById('TotalHours').value) || 0;

            if (hours < 0.5 || hours > 200) {
                e.preventDefault();
                alert('Hours must be between 0.5 and 200.');
                document.getElementById('TotalHours').focus();
                return;
            }

            const submitButton = e.submitter;
            if (submitButton.value === 'submit') {
                const confirmed = confirm('Are you sure you want to submit this claim? Once submitted, you cannot edit it.');
                if (!confirmed) {
                    e.preventDefault();
                }
            }
        });
    </script>

    <style>
        .new-document-item {
            border-left: 4px solid #198754;
        }

        .smaller {
            font-size: 0.75rem;
        }
    </style>
}